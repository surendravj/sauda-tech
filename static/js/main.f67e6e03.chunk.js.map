{"version":3,"sources":["components/Navbar.js","components/TradeCard.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","TradeCard","trade","status","buyer","station","shipment","type","rate","rateUnit","slice","quantity","quality","App","useState","data","trades","settrades","filterTrade","filter","arr","map","push","name","id","onChange","index","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f67e6e03.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../index.css';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div className=\"mb-5\">\r\n            <nav className=\"navbar fixed-top navbar-light\">\r\n                <a className=\"navbar-brand\" href=\"google.com\">Sauda Technologies</a>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport '../index.css';\r\n\r\n\r\nconst TradeCard = ({ trade }) => {\r\n    return (\r\n        <div className=\"tradecard mt-2\">\r\n            <div className=\"tradeBadge text-left\">\r\n                <p className=\"text-center\">{trade.status}</p>\r\n                \r\n            </div>\r\n            <div className=\"row mt-3\">\r\n                <div className=\"col\">\r\n                    <p className=\"headings\">BUYER</p>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <p className=\"headings\">STATION</p>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <p className=\"headings\">SHIPMENT</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <p className=\"values\">{trade.buyer}</p>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <p className=\"values\">{trade.station}</p>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <p className=\"values\">{trade.shipment ? trade.shipment : \"NO DATA\"}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row mt-3\">\r\n                <div className=\"col\">\r\n                    <p className=\"headings\">TYPE</p>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <p className=\"headings\">RATE</p>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <p className=\"headings\">QUANTITY</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <p className=\"values\">{trade.type}</p>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <p className=\"values\">{trade.rate}<span>&#x20B9;</span>/{trade.rateUnit.slice(3)}</p>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <p className=\"values\">{trade.quantity} {trade.rateUnit.slice(3)}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <p className=\"headings\">QUALITY</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <p className=\"values\">{trade.quality ? trade.quality : \"NO DATA\"}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TradeCard;\r\n","import React, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport data from './data.json';\nimport TradeCard from './components/TradeCard';\nimport './index.css';\n\nfunction App() {\n\n  const [trades, settrades] = useState(data);\n\n  // function that filter the trades based on type\n  const filterTrade = (filter) => {\n    var arr = [];\n    data.map((trade) => {\n      if (trade.type === filter) {\n        arr.push(trade);\n      }\n    })\n    settrades(arr);\n  }\n\n  // renders the TradeCard \n  const renderTrade = () => {\n    return trades.map((trade, index) => {\n      return (\n        <div className=\"col-md-6 col-sm-6 col-xs-12\" key={index}>\n          <TradeCard trade={trade} />\n        </div>\n      )\n    })\n  }\n\n  const filterButtons = () => {\n    return (\n      <div className=\"fixed\">\n        <p className=\"form-check\">Supplier Types : </p>\n        <div className=\"form-check ml-1\">\n          <input className=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios1\" onChange={() => filterTrade(\"s6\")} />\n          <label className=\"form-check-label\">s6</label>\n        </div>\n        <div className=\"form-check ml-1\">\n          <input className=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios1\" onChange={() => filterTrade(\"Shankar 6\")} />\n          <label className=\"form-check-label\">Shankar 6</label>\n        </div>\n        <div className=\"form-check ml-1\">\n          <input className=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios1\" onChange={() => filterTrade(\"type\")} />\n          <label className=\"form-check-label\">Type</label>\n        </div>\n      </div >\n    )\n  }\n\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className=\"container\">\n        <p className=\"display-4 text-center heading\">Trades for cotton fiber</p>\n        {filterButtons()}\n        <div className=\"row mt-1 mb-3\">\n          {renderTrade()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.register();\n"],"sourceRoot":""}